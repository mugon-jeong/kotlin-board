openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /posts/{id}:
    get:
      tags:
      - post-controller
      operationId: getPost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostDetailResponse'
    put:
      tags:
      - post-controller
      operationId: updatePost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int64
    delete:
      tags:
      - post-controller
      operationId: deletePost
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: createdBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int64
  /comments/{commentId}:
    put:
      tags:
      - comment-controller
      operationId: updateComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int64
    delete:
      tags:
      - comment-controller
      operationId: deleteComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: deletedBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int64
  /posts:
    get:
      tags:
      - post-controller
      operationId: getPosts
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      - name: postSearchRequest
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/PostSearchRequest'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagePostSummaryResponse'
    post:
      tags:
      - post-controller
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int64
  /posts/{postId}/likes:
    post:
      tags:
      - like-controller
      operationId: createLike
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: createdBy
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /posts/{postId}/comments:
    post:
      tags:
      - comment-controller
      operationId: createCommnet
      parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int64
  /redis:
    get:
      tags:
      - redis-controller
      operationId: getRedisCount
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int64
components:
  schemas:
    PostUpdateRequest:
      required:
      - content
      - tags
      - title
      - updatedBy
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        updatedBy:
          type: string
        tags:
          type: array
          items:
            type: string
    CommentUpdateRequest:
      required:
      - content
      - updatedBy
      type: object
      properties:
        content:
          type: string
        updatedBy:
          type: string
    PostCreateRequest:
      required:
      - content
      - createdBy
      - tags
      - title
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        createdBy:
          type: string
        tags:
          type: array
          items:
            type: string
    CommentCreateRequest:
      required:
      - content
      - createdBy
      type: object
      properties:
        content:
          type: string
        createdBy:
          type: string
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PostSearchRequest:
      type: object
      properties:
        title:
          type: string
        createdBy:
          type: string
        tag:
          type: string
    PagePostSummaryResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/PostSummaryResponse'
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/SortObject'
        offset:
          type: integer
          format: int64
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    PostSummaryResponse:
      required:
      - createdAt
      - createdBy
      - id
      - likeCount
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        createdBy:
          type: string
        createdAt:
          type: string
        tag:
          type: string
        likeCount:
          type: integer
          format: int64
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    CommentResponse:
      required:
      - content
      - createdAt
      - createdBy
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        createdBy:
          type: string
        createdAt:
          type: string
    PostDetailResponse:
      required:
      - comments
      - content
      - createdAt
      - createdBy
      - id
      - likeCount
      - tags
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        createdBy:
          type: string
        createdAt:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'
        tags:
          type: array
          items:
            type: string
        likeCount:
          type: integer
          format: int64
